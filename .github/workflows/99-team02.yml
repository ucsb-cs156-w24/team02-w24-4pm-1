name: 99 - Create Issues for team02

env:
  ASN_LINK: https://ucsb-cs156.github.io/w24/lab/team02
  GH_TOKEN: ${{ github.token }}
  LABEL_COLOR: "{ \"UCSBDiningCommonsMenuItem\": \"ff0000\", \"UCSBOrganization\": \"00ff00\", \"RecommendationRequest\": \"0000ff\", \"MenuItemReview\": \"ff00ff\", \"HelpRequest\": \"ffff00\", \"Articles\": \"00ffff\" }"


on:
  workflow_dispatch:
jobs:

  createOneOffIssues:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - name: Delete label setup
        continue-on-error: true
        run: |
          gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{github.repository}}/labels/setup 
      - name: Add Label setup
        continue-on-error: true
        run: |
          gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{github.repository}}/labels \
              -f name='setup' \
              -f description='One time tasks to divide among all team members' \
              -f color='dddddd' 
      - name: Add table to README.md
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Add table to README.md
          labels: "setup"
          body: |
            # Acceptance Criteria:
            - [ ] The README.md has a table at the top like the one shown below
                  indicating which team member is initially taking on
                  which database table, and which is unassigned.
                  
                  ```
                  | Table                       | Team Member  | Github Id     |
                  |-----------------------------|--------------|---------------|
                  | `UCSBDiningCommonsMenuItem` | Alice        | alice33       |
                  | `UCSBOrganization`          | (unassigned) |               |
                  | `RecommendationRequest`     | Bob          | robertg       |
                  | `MenuItemReview`            | Charlie      | gauchocharlie |
                  | `HelpRequest`               | Danielle     | danielle      |
                  | `Articles`                  | Eddie        | eddydp        |
                  ```

      - name: Set up GitHub Pages
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Github Pages
          labels: "setup"
          body: |
            # Acceptance Criteria:
            - [ ] Github Pages is active, using the `gh-pages` branch and the root directory
            - [ ] The main page of the repo has a link to the Github Pages site in the right side bar
            - [ ] The links on the Github Pages site work properly.

            # Details

            See the file  [`docs/github-pages.md`](/ucsb-cs156-w24/STARTER-team02/blob/main/docs/github-pages.md) in the repo for details
      
      - name: Set up Team prod deployment
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Team prod deployment
          labels: "setup"
          body: |
            # Acceptance Criteria:
            - [ ] An app named `team02` is created on this team's dokku server.
            - [ ] An database is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] HTTPS is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The ADMIN_EMAILS are configured for that app.
                  * You should find the ones you need in a pinned post on your team's Slack channel.
                  * Instructions for configuring the variable are here: 
                    <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Google OAuth is configured for that app.
                  * Instructions for configuring OAuth credentials are here: 
                    <https://ucsb-cs156.github.io/topics/oauth/oauth_google_setup.html>
                  * Then you need to use the instructions here to configure the environment variables `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] The main branch is deployed on Dokku at, for example,
                  <https://team02.dokku-xx.cs.ucsb.edu> (substituting your
                  own Dokku instances for xx).
            - [ ] Everyone on the team, and the instructor and TAs, are all able to 
                  login with OAuth and see that they have admin privileges.

            # Details

            See the file  [`docs/dokku.md`](/ucsb-cs156-w24/STARTER-team02/blob/main/docs/dokku.md) in the repo for details.

      - name: Set up Team qa deployment
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Team qa deployment
          labels: "setup"
          body: |
            # Acceptance Criteria:

            - [ ] An app named `team02-qa` is created on this team's dokku server.
            - [ ] An database is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] HTTPS is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The ADMIN_EMAILS are configured for that app.
                  * You should find the ones you need in a pinned post on your team's Slack channel.
                  * Instructions for configuring the variable are here: 
                    <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Google OAuth is configured for that app.
                  * Instructions for configuring OAuth credentials are here: 
                    <https://ucsb-cs156.github.io/topics/oauth/oauth_google_setup.html>
                  * Then you need to use the instructions here to configure the environment variables `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] The main branch is deployed on Dokku at, for example,
                  <https://team02-qa.dokku-xx.cs.ucsb.edu> (substituting your
                  own Dokku instances for xx).
            - [ ] Everyone on the team, and the instructor and TAs, are all able to 
                  login with OAuth and see that they have admin privileges.
                  
           
            # Details

            Set up a separate Dokku instance for QA.  Adapt the instructions from 
            the file [`docs/dokku.md`](/ucsb-cs156-w24/STARTER-team02/blob/main/docs/dokku.md) in the repo.  The QA (quality assurance) instance
            starts with the main branch, but later on, you will be able to deploy
            any branch to this instance. You typically do this when you have a PR
            that is being code reviewed.  You can use the your team's Slack channel
            to coordinate who is deploying what to QA at any given time.


      - name: Adjust links in README.md
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Adjust title and links in README.md
          labels: "setup"
          body: |
            ## Acceptance criteria
            - [ ] The title of the README.md file is changed from `STARTER-team02` to the name of the app (e.g. `team02-w24-6pm-4`)
            - [ ] The README.md file is updated with links to the prod and qa instances on dokku.
            - [ ] The README.md file is updated with any other links as specified in the instructions.
            
            ## Details
            
            See the README.md file in the repo for details.
  
   
      - name: Submit for Grading
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title:  Submit for Grading
          labels: "setup"
          body: |

            This issue should be the very *last* one that the team drags into the "done" column;
            it signifies that the sprint is complete, and that the project is ready for the
            staff to review it for a grade.

            ## Acceptance criteria
  
            - [ ] All PRs have been code reviewed and merged to main
            - [ ] All issues are in the done column 
            - [ ] The `main` branch (after all PRs merged) has been reployed to the dokku instance via:
                  <tt>dokku git:sync team02 <i>url</i> main</tt><br />
                  <tt>dokku ps:rebuild team02</tt>
            - [ ] The assignment has been submitted on Canvas
            
            ## Details
            
            See the assignment description at ${{env.ASN_LINK}} for details.
          
  createIssues:
    needs: [ createOneOffIssues ]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        api: [ "UCSBDiningCommonsMenuItem", "UCSBOrganization", "RecommendationRequest", "MenuItemReview", "HelpRequest" , "Articles"]
      
    steps:
    
      - uses: actions/checkout@v3
      - name: Delete Label for ${{ matrix.api }}
        continue-on-error: true
        env:
          name: ${{ matrix.api }}
          color: ${{ fromJSON(env.LABEL_COLOR)[matrix.api] }}
        run: |
          gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{github.repository}}/labels/${{env.name}} 
      - name: Create Label
        env:
          name: ${{ matrix.api }}
          color: ${{ fromJSON(env.LABEL_COLOR)[matrix.api] }}
        run: |
          gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{github.repository}}/labels \
              -f name='${{env.name}}' \
              -f description='team02 issues for ${{env.name}}' \
              -f color='${{env.color}}' 
      - name: Create personal dokku dev deployment
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: "${{env.name}} - Create personal dokku dev deployment"
          labels: "${{env.name}}"
          body: |

            # Dependencies

            None: The team member that takes on ${{env.name}} should start with this issue.

            # Overview

            The team member that takes on ${{env.name}} as their database table
            should use this issue to track creating their personal dokku
            deployment.
            
            # Acceptance Criteria:
            - [ ] An app named `team02-YOURGITHUBID-dev` is created on this team's dokku server, where
                  `YOURGITHUBID` is your github id.

            - [ ] An database is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] HTTPS is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The ADMIN_EMAILS are configured for that app.
                  * You should find the ones you need in a pinned post on your team's Slack channel.
                  * Instructions for configuring the variable are here: 
                    <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Google OAuth is configured for that app.
                  * Instructions for configuring OAuth credentials are here: 
                    <https://ucsb-cs156.github.io/topics/oauth/oauth_google_setup.html>
                  * Then you need to use the instructions here to configure the environment variables `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Everyone on the team, and the instructor and TAs, are all able to 
                  login with OAuth and see that they have admin privileges.
            - [ ] Initially, the `main` branch is deployed and works properly (later, you will deploy your own branches to this 
                  instance as you test them before merging.)     
            # Next issue

            Next, work on 

            * Drag the issue for "${{env.name}} - Create personal dokku dev deployment" directly into the "Done" column (we don't do code review on setup tasks like this one.)
            * Locate the issue: "Create database table for ${{env.name}}" on the Kanban board.
            * Assign that issue to yourself
            * Drag it into the "In Progress" column.
            * Start a new branch.  The new branch name is something like `xy-${{env.name}}-create-db`
              <pre>
              git fetch
              git checkout main
              git pull origin main
              git checkout -b <i>your-branch-name</i>
              </pre>
            * Start on the next issue
                        
      - name: Create database table
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Create database table for ${{env.name}}
          labels: "${{env.name}}"
          body: |

            # Dependencies

            This issue should be completed *after* the issue "${{env.name}} - Create personal dokku dev deployment"

            # Overview

            This issue involves creating the database table and migration file for `${{env.name}}`.

            For step-by-step instructions, please see these portions of the
            lab writeup:

            * <https://ucsb-cs156.github.io/w24/lab/team02.html#the-two-database-tables-in-the-starting-code>
            * <https://ucsb-cs156.github.io/w24/lab/team02.html#your-task-add-crud-for-additional-database-tables>
            * <https://ucsb-cs156.github.io/w24/lab/team02.html#adding-a-database-table>
            

            # Acceptance Criteria:
            
            - [ ] There is an `@Entity` class called ${{env.name}}.java
            - [ ] There is a `@Repository` class called ${{env.name}}Repository.java
            - [ ] There is a database migration file called ${{env.name}}.json
            - [ ] When you start up the repo on localhost, you can see the table
                  using the H2 console (see the file [`docs/h2-database.md`](/ucsb-cs156-w24/STARTER-team02/blob/main/docs/h2-database.md) for 
                  instructions.)
            - [ ] When you deploy the app to Dokku, you can see the table
                  using the `dokku postgres:connect team02-db` command
                  (use `\dt` to list the tables) (See <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html#postgres-command-line> for more info.)
          
            # What to do next

            When you've met all of the acceptance criteria:

            **Make a PR**: Do a PR for this branch, being sure to enter a [reasonable title](https://ucsb-cs156.github.io/topics/pull_requests.html#pr-titles)
            and [description](https://ucsb-cs156.github.io/topics/pull_requests.html#pr-descriptions).

            In the description, include the text "Closes #n" where `n` is the number of
            this issue.

            Then ask for a team member to review your PR.

            Finally: drag this issue from "In Progress" to "In Review".
      
            **Review Others' PRs**: Next, see if there are any PRs that need to be code reviewed and merged.  Unless you are the
            first person on your team to complete a PR, there likely is at least one.
            See: 
            * [General Code Review Advice](https://ucsb-cs156.github.io/topics/code_reviews/)
            * [Performin Code Reviews on Github](https://ucsb-cs156.github.io/topics/code_reviews/code_reviews_github.html)

            **Start your next issue **: Then, find the issue for 
            "Create `${{env.name}}Controller..." on the Kanban board in the ToDo column.
            
            * Assign it to yourself
            * Drag into "In Progress"
            * Create a new branch, starting from the branch for the issue you just finished.
            * Start on the new issue.

      - name: Create Controller, add GET (index) and POST (create)
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Create `${{env.name}}Controller`, add `GET` (index) and `POST` (create)
          labels: "${{env.name}}"
          body: |

              # Dependencies

              This issue should be completed *after* the issue with the title "Create database table for ${{env.name}}"

              # Overview

              In this issue, you'll create a *Controller*.  In the Spring web framework, a Controller is a file that maps request URLs (e.g. `/api/${{env.name}}/all` to some code that runs to produces the response to that request.
              
              (1) First locate the directory where the Java source code files for controllers can be found:
              
              * [`src/main/java/edu/ucsb/cs156/example/controllers`](https://github.com/ucsb-cs156-w24/STARTER-team02/tree/main/src/main/java/edu/ucsb/cs156/example/controllers) 
              
              (2) Then, determine which example file you are going to use as a basis for your controller by reading the team02 instructions about the `@Id` field here: <https://ucsb-cs156.github.io/w24/lab/team02.html#two-types-of-id-values-for-an-entity-class>
              
              The two candidates are:
              * `UCSBDatesController.java` (if your database table a numeric `@Id` field)
              * `UCSBDiningCommonsController.java` (if your database table uses a string field as it's `@Id` field)

              Keep this file open in one window; you'll need this as source material for the file you are about to create.

              (3) In a separate window, create a new file called `${{env.name}}Controller.java` in the `src/main/java/edu/ucsb/cs156/example/controllers` directory.
              
              From the example file, copy over:
              * all of the imports
              * the top level class annotations (e.g. `@Tag`, `@RequestMapping`, `@RestController` and `@Slf4j`) adjusting them as needed
              * the `@Autowired` declaration of the repository class for your database table; this gives you access to the database table.  The `@Autowired` declaration signals
                the Spring boot framework to automatically invoke the constructor for this class so that you don't have to.  Using `@Autowired`
                also allows the code to automatically switch between using a real database when running as a web app,
                or a "mock" database when we do unit testing of the controller methods.

              (4) Don't copy over all of the methods yet; just copy over these two methods with these annotations:
              
              | Annotation | Purpose |
              |-|-|
              | `@GetMapping("/all")`   | Get all records in the table and return as a JSON array |
              | `@PostMapping("/post")` | Use the data in the input parameters to create a new row in the table and return the data as JSON |
              
              (5) Edit the names of the fields, etc. to match your database table.

              (6) Next, use Swagger to see if your methods work.  Debug until you get correct results using Swagger.
              
              (7) When your interactive testing works, we'll move on to creating automated tests.  Locate the directory for controller tests:
              
              * [`src/test/java/edu/ucsb/cs156/example/controllers`](https://github.com/ucsb-cs156-w24/STARTER-team02/tree/main/src/test/java/edu/ucsb/cs156/example/controllers)  

              Find the file with tests for the controller you used as a basis for your controller file, 
              i.e. 

              * `UCSBDatesControllerTests.java` (if your database table a numeric `@Id` field)
              * `UCSBDiningCommonsControllerTests.java` (if your database table uses a string field as it's `@Id` field)

              Keep this file open in one window; you'll need this as source material for the file you are about to create.

              (8) In a separate window, create a new file called `${{env.name}}ControllerTests.java` in the `src/test/java/edu/ucsb/cs156/example/controllers` directory.

              (9) From the source file you identified in step (7) above, copy over:
              
              * all of the imports
              * the  `@WebMvcTest(...)` annotation (be sure to change the parameter here to the name of the controller test you are testing; forgetting to do so is a common source of errors)
              * the `@Import(TestConfig.class)` annotation (this one stays exactly as it is)
              * the `@MockBean` declaration for the repository for your new database table; this creates a "mock" (i.e. "fake") database object using a Java package called `Mockito`)
              * the `@MockBean` declaration for the `UserRepository`; this is needed so that we can work with the mock users to test what happens in various scenarios: user not logged in, regular user logged in, admin user logged in
              
              Be sure to change the name of the controller class to match the one for your database table.

              (10) Next, copy over just the tests that pertain to the methods you defined in your controller so far, i.e. the ones under the comments:
              * `// Tests for GET /api/ucsbdiningcommons/all`
              * `// Tests for POST /api/ucsbdiningcommons...`

              You'll see additional tests for another `GET` method, as well as `DELETE` and `PUT`; we don't want
              those tests yet (that's a later issue).

              (11) Check test coverage with `mvn test jacoco:report`; to read the report, open `target/site/jacoco/index.html` in a web browser. Iterate until you have 100% line/branch coverage.
              
              (12) Check test coverage with `mvn test pitest:mutationCoverage`; to read the report, open `target/pit-reports/index.html` in a web browser. Iterate until there are no surviving mutations (e.g. `>> Generated 61 mutations Killed 61 (100%)`).  You may ignore line coverage of less than 100% reported by pitest (e.g. this is fine: `>> Line Coverage: 171/175 (98%)`).

              # Acceptance Criteria:

              - [ ] There is a controller file `${{env.name}}Controller.java`
                in the expected directory.
              - [ ] In `${{env.name}}Controller.java` there is 
                code for a `GET /api/${{env.name}}/all` endpoint 
                that returns a JSON list of all `${{env.name}}`s in the database.
                (We sometimes call this an *index* action since it lists all
                items in the database.)
              - [ ] In `${{env.name}}Controller.java` there is 
                code for a `POST /api/${{env.name}}/post` endpoint
                that can be used to create a new entry in the table. (This
                is a *create* action.)
              - [ ] The Swagger-UI endpoints for these are well documented so that
                any member of the team can understand what they are for and
                how to use them.
              - [ ] The `POST` endpoint works as expected, in the sense that new
                records can be added to the database (on localhost).
              - [ ] The `GET` endpoint works as expected, in the sense that the new
                records that are added show up (on localhost).
              - [ ] The `GET` and `POST` endpoints work as expected when the 
                app is deployed to Dokku.
              - [ ] There is full test coverage (Jacoco) for the methods in 
                `${{env.name}}Controller.java`
              - [ ] There is full mutation test coverage (Pitest) for the methods in
                `${{env.name}}Controller.java`

              # Next issue

              # What to do next

              When you've met all of the acceptance criteria:
  
              **Make a PR**: Do a PR for this branch, being sure to enter a [reasonable title](https://ucsb-cs156.github.io/topics/pull_requests.html#pr-titles)
              and [description](https://ucsb-cs156.github.io/topics/pull_requests.html#pr-descriptions).
  
              In the description, include the text "Closes #n" where `n` is the number of
              this issue.
  
              Then ask for a team member to review your PR.
  
              Finally: drag this issue from "In Progress" to "In Review".
        
              **Review Others' PRs**: Next, see if there are any PRs that need to be code reviewed and merged.  Unless you are the
              first person on your team to complete a PR, there likely is at least one.
              See: 
              * [General Code Review Advice](https://ucsb-cs156.github.io/topics/code_reviews/)
              * [Performin Code Reviews on Github](https://ucsb-cs156.github.io/topics/code_reviews/code_reviews_github.html)
  
              **Start your next issue **: 
              
              Now you can complete these in any order:
              * Add `GET` (show) endpoint for a single record in ${{env.name}} table
              * Add `PUT` (edit) endpoint for a single record in ${{env.name}} table
              * Add `DELETE` endpoint for a specific record in ${{env.name}} table.
              
              Find the issue you are going to work on next on the Kanban board.
              
              * Assign it to yourself
              * Drag into "In Progress"
              * Create a new branch, starting from the branch for the issue you just finished.
              * Start on the new issue.

      - name:  Add `GET` (show) endpoint for a single record in table
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Add `GET` (show) endpoint for a single record in ${{env.name}} table
          labels: "${{env.name}}"
          body: |

            # Dependencies

            This issue should be completed *after* the issue with the title "Create `${{env.name}}Controller`..."

            # Overview
            
            In this issue, we add one more method from the example Controller used as a basis for our code; namely the method with the annotation shown below:
            
            | Annotation | Purpose |
            |-|-|
            |`@GetMapping("")` | Get a single record from the table; use the value passed in as a `@RequestParam` to do a lookup by id.  If a matching row is found, return the row as a JSON object, otherwise throw an `EntityNotFoundException`. |
                       
            Add `GET` (show) endpoint for a single record in ${{env.name}} table

            Also add the tests for this endpoint.
            
            # Acceptance Criteria:
            
            - [ ] In `${{env.name}}Controller.java` there is code for an 
                  endpoint `GET /api/${{env.name}}?id=123` endpoint 
                  that returns the JSON of the database record with id 123 if it
                  exists, or a 404 and the error message `id 123 not found` if it
                  does not.
            - [ ] The Swagger-UI endpoints for this endpoint is well documented
                  so that any member of the team can understand how to use it.
            - [ ] The endpoint works as expected on localhost.
            - [ ] The endpoint works as expected when deployed to Dokku.
            - [ ] There is full test coverage (Jacoco) for the new code in 
                  `${{env.name}}Controller.java`
            - [ ] There is full mutation test coverage (Pitest) for new code in
                  `${{env.name}}Controller.java`

            # What to do next

            Do a PR, following all of the usual steps (title, description, `Closes #n` text,
            dragging issue to "In Review", requesting reviewers).

            Check to see if any fellow team members PRs need to be reviewed.
            
            Then, assign yourself the next incomplete issue for your database table (`${{env.name}}`)

            Follow all the usual steps (assign to self, drag to "In Progress", start new branch.)

            When you are done with all issues for `${{env.name}}`, please give your full attention to 
            helping others on your team to complete the sprint, so that the team
            is ready to submit on Canvas by the deadline.
            
            
      - name: Add `PUT` (edit) endpoint for a single record in table

        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Add `PUT` (edit) endpoint for a single record in ${{env.name}} table
          labels: "${{env.name}}"
          body: |

            # Dependencies

            This issue should be completed *after* the issue with the title "Create `UCSBDiningCommonsMenuItemController`..."

            # Overview
            
            In this issue, we add one more method from the example Controller used as a basis for our code; namely the method with the annotation shown below:
            
            | Annotation | Purpose |
            |-|-|
            |`@PutMapping("")` | Get a single record from the table; use the value passed in as a `@RequestParam` to do a lookup by id.  If a matching row is found, update that row with the values passed in as a JSON object. If a matching row is not found, throw an `EntityNotFoundException`. |
                       

            Note that while it isn't strictly necessary, it may be a good idea to implement `GET` for a single item
            first; when using `PUT` manually, it's convenient to be able to copy/paste the JSON representation of the data from the
            `GET` by id method, paste it into the swagger interface, then edit it to make the changes you want before clicking to
            submit the request.
            
            You'll need to copy over the code for the PUT method from the example controller, 
            and then paste those into `${{env.name}}Controller.java` and edit them to match your database table.
        
            Then, copy over the tests that pertain to the PUT method from the example controller,
            paste those into `${{env.name}}ControllerTests.java` and edit them to match your database table.

            # Acceptance Criteria:
            
            - [ ] In `${{env.name}}Controller.java` there is code for an 
                  endpoint `PUT /api/${{env.name}}?id=123` endpoint 
                  that accepts JSON for a new set of values for the database
                  fields other than `id`, and updates the values of those fields.
            - [ ] The Swagger-UI endpoints for this endpoint is well documented
                  so that any member of the team can understand how to use it.
            - [ ] The endpoint works as expected on localhost.
            - [ ] The endpoint works as expected when deployed to Dokku.
            - [ ] There is full test coverage (Jacoco) for the new code in 
                  `${{env.name}}Controller.java`
            - [ ] There is full mutation test coverage (Pitest) for new code in
                  `${{env.name}}Controller.java`   

            # What to do next

            Do a PR, following all of the usual steps (title, description, `Closes #n` text,
            dragging issue to "In Review", requesting reviewers).

            Check to see if any fellow team members PRs need to be reviewed.
            
            Then, assign yourself the next incomplete issue for your database table (`${{env.name}}`)

            Follow all the usual steps (assign to self, drag to "In Progress", start new branch.)

            When you are done with all issues for `${{env.name}}`, please give your full attention to 
            helping others on your team to complete the sprint, so that the team
            is ready to submit on Canvas by the deadline.
            

      - name: Add `DELETE` endpoint for a specific record in table
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Add `DELETE` endpoint for a specific record in ${{env.name}} table.
          labels: "${{env.name}}"
          body: |

            # Dependencies

            This issue should be completed *after* the issue with the title "Create `${{env.name}}Controller`..."

            # Overview
            
            In this issue, we add one more method from the example Controller used as a basis for our code; namely the method with the annotation shown below:
            
            | Annotation | Purpose |
            |-|-|
            |`@DeleteMapping("")` | Delete a single record from the table; use the value passed in as a `@RequestParam` to do a lookup by id. If a matching row is not found, throw an `EntityNotFoundException`. |
                   
            You'll need to copy over the code for the DELETE method from the example controller, 
            and then paste those into `${{env.name}}Controller.java` and edit them to match your database table.
        
            Then, copy over the tests that pertain to the DELETE method from the example controller,
            paste those into `${{env.name}}ControllerTests.java` and edit them to match your database table.

            # Acceptance Criteria:
            
            - [ ] In `${{env.name}}Controller.java` there is code for an 
                  endpoint `DELETE /api/${{env.name}}?id=123` endpoint 
                  that deletes the record if it exists, and returns 200 (ok) and 
                  the text `record 123 deleted`, or returns 404 (Not Found) and
                  the text `record 123 not found` if it does not.
            - [ ] The Swagger-UI endpoints for this endpoint is well documented
                  so that any member of the team can understand how to use it.
            - [ ] The endpoint works as expected on localhost.
            - [ ] The endpoint works as expected when deployed to Dokku.
            - [ ] There is full test coverage (Jacoco) for the new code in 
                  `${{env.name}}Controller.java`
            - [ ] There is full mutation test coverage (Pitest) for new code in
                  `${{env.name}}Controller.java`

            # What to do next

            Do a PR, following all of the usual steps (title, description, `Closes #n` text,
            dragging issue to "In Review", requesting reviewers).

            Check to see if any fellow team members PRs need to be reviewed.
            
            Then, assign yourself the next incomplete issue for your database table (`${{env.name}}`)

            Follow all the usual steps (assign to self, drag to "In Progress", start new branch.)

            When you are done with all issues for `${{env.name}}`, please give your full attention to 
            helping others on your team to complete the sprint, so that the team
            is ready to submit on Canvas by the deadline.
            
          
