package edu.ucsb.cs156.example.controllers;

import edu.ucsb.cs156.example.repositories.UserRepository;
import edu.ucsb.cs156.example.testconfig.TestConfig;
import edu.ucsb.cs156.example.ControllerTestCase;
import edu.ucsb.cs156.example.entities.HelpRequest;
import edu.ucsb.cs156.example.errors.EntityNotFoundException;
import edu.ucsb.cs156.example.repositories.HelpRequestRepository;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MvcResult;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;

import java.time.LocalDateTime;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@WebMvcTest(controllers = HelpRequestController.class)
@Import(TestConfig.class)
public class HelpRequestControllerTests extends ControllerTestCase {

        @MockBean
        HelpRequestRepository helprequestRepository;

        @MockBean
        UserRepository userRepository;

        // Authorization tests for /api/helprequests/admin/all

        @Test
        public void logged_out_users_cannot_get_all() throws Exception {
                mockMvc.perform(get("/api/helprequests/all"))
                                .andExpect(status().is(403)); // logged out users can't get all
        }

        @WithMockUser(roles = { "USER" })
        @Test
        public void logged_in_users_can_get_all() throws Exception {
                mockMvc.perform(get("/api/helprequests/all"))
                                .andExpect(status().is(200)); // logged
        }

        // Authorization tests for /api/helprequests/

        @Test
        public void logged_out_users_cannot_get_by_id() throws Exception {
                mockMvc.perform(get("/api/helprequests?id=7"))
                                .andExpect(status().is(403)); // logged out users can't get by id
        }

        // Authorization tests for /api/helprequests/post

        @Test
        public void logged_out_users_cannot_post() throws Exception {
                mockMvc.perform(post("/api/helprequests/post"))
                                .andExpect(status().is(403));
        }

        @WithMockUser(roles = { "USER" })
        @Test
        public void logged_in_regular_users_cannot_post() throws Exception {
                mockMvc.perform(post("/api/helprequests/post"))
                                .andExpect(status().is(403)); // only admins can post
        }

        // // Tests with mocks for database actions

        @WithMockUser(roles = { "USER" })
        @Test
        public void logged_in_user_can_get_all_helprequestss() throws Exception {

                // arrange
                LocalDateTime ldt1 = LocalDateTime.parse("2022-04-20T00:00:00");
                LocalDateTime ldt2 = LocalDateTime.parse("2022-04-19T00:00:00");

                HelpRequest helprequests1 = HelpRequest.builder()
                                .requesterEmail("jingpeng@ucsb.edu")
                                .teamId("team02-staff")
                                .explanation("Help with testing")
                                .tableOrBreakoutRoom("table12")
                                .requestTime(ldt1)
                                .solved(false)
                                .build();

                HelpRequest helprequests2 = HelpRequest.builder()
                                .requesterEmail("phtcon@ucsb.edu")
                                .teamId("team02")
                                .explanation("Help with Spring Boot")
                                .tableOrBreakoutRoom("table8")
                                .requestTime(ldt2)
                                .solved(false)
                                .build();

                ArrayList<HelpRequest> expectedHelpRequests = new ArrayList<>();
                expectedHelpRequests.addAll(Arrays.asList(helprequests1, helprequests2));

                when(helprequestRepository.findAll()).thenReturn(expectedHelpRequests);

                // act
                MvcResult response = mockMvc.perform(get("/api/helprequests/all"))
                                .andExpect(status().isOk()).andReturn();

                // assert

                verify(helprequestRepository, times(1)).findAll();
                String expectedJson = mapper.writeValueAsString(expectedHelpRequests);
                String responseString = response.getResponse().getContentAsString();
                assertEquals(expectedJson, responseString);
        }

        @WithMockUser(roles = { "ADMIN", "USER" })
        @Test
        public void an_admin_user_can_post_a_new_helprequest() throws Exception {
                // arrange
                LocalDateTime ldt = LocalDateTime.parse("2022-04-20T00:00:00");

                HelpRequest helprequest1 = HelpRequest.builder()
                                .requesterEmail("phtcon@ucsb.edu")
                                .teamId("team02")
                                .tableOrBreakoutRoom("table8")
                                .explanation("Help with Spring Boot")
                                .requestTime(ldt)
                                .solved(true)
                                .build();

                when(helprequestRepository.save(eq(helprequest1))).thenReturn(helprequest1);

                // act
                MvcResult response = mockMvc.perform(
                                post("/api/helprequests/post?requesterEmail=phtcon@ucsb.edu&teamId=team02&tableOrBreakoutRoom=table8&explanation=Help with Spring Boot&requestTime=2022-04-20T00:00:00&solved=true")
                                                .with(csrf()))
                                .andExpect(status().isOk()).andReturn();

                // assert
                verify(helprequestRepository, times(1)).save(helprequest1);
                String expectedJson = mapper.writeValueAsString(helprequest1);
                String responseString = response.getResponse().getContentAsString();
                assertEquals(expectedJson, responseString);
        }

        @WithMockUser(roles = { "USER" })
        @Test
        public void test_that_logged_in_user_can_get_by_id_when_the_id_exists() throws Exception {

                // arrange
                LocalDateTime ldt = LocalDateTime.parse("2022-04-20T00:00:00");

                HelpRequest helprequest = HelpRequest.builder()
                                .requesterEmail("phtcon@ucsb.edu")
                                .teamId("team02")
                                .tableOrBreakoutRoom("table8")
                                .explanation("Help with Spring Boot")
                                .requestTime(ldt)
                                .solved(true)
                                .build();

                when(helprequestRepository.findById(eq(7L))).thenReturn(Optional.of(helprequest));

                // act
                MvcResult response = mockMvc.perform(get("/api/helprequests?id=7"))
                                .andExpect(status().isOk()).andReturn();

                // assert

                verify(helprequestRepository, times(1)).findById(eq(7L));
                String expectedJson = mapper.writeValueAsString(helprequest);
                String responseString = response.getResponse().getContentAsString();
                assertEquals(expectedJson, responseString);
        }

        @WithMockUser(roles = { "USER" })
        @Test
        public void test_that_logged_in_user_can_get_by_id_when_the_id_does_not_exist() throws Exception {

                // arrange
                when(helprequestRepository.findById(eq(7L))).thenReturn(Optional.empty());

                // act
                MvcResult response = mockMvc.perform(get("/api/helprequests?id=7"))
                                .andExpect(status().isNotFound()).andReturn();

                // assert

                verify(helprequestRepository, times(1)).findById(eq(7L));
                Map<String, Object> json = responseToJson(response);
                assertEquals("EntityNotFoundException", json.get("type"));
                assertEquals("HelpRequest with id 7 not found", json.get("message"));
        }

        @WithMockUser(roles = { "ADMIN", "USER" })
        @Test
        public void admin_can_delete_a_date() throws Exception {
                // arrange

                LocalDateTime ldt = LocalDateTime.parse("2022-04-20T00:00:00");

                HelpRequest helprequest = HelpRequest.builder()
                                .requesterEmail("phtcon@ucsb.edu")
                                .teamId("team02")
                                .tableOrBreakoutRoom("table8")
                                .explanation("Help with Spring Boot")
                                .requestTime(ldt)
                                .solved(true)
                                .build();

                when(helprequestRepository.findById(eq(123L))).thenReturn(Optional.of(helprequest));

                // act
                MvcResult response = mockMvc.perform(
                                delete("/api/helprequests?id=123")
                                                .with(csrf()))
                                .andExpect(status().isOk()).andReturn();

                // assert
                verify(helprequestRepository, times(1)).findById(123L);
                verify(helprequestRepository, times(1)).delete(any());

                Map<String, Object> json = responseToJson(response);
                assertEquals("HelpRequest with id 123 deleted", json.get("message"));
        }

        @WithMockUser(roles = { "ADMIN", "USER" })
        @Test
        public void admin_tries_to_delete_non_existant_helprequests_and_gets_right_error_message()
                        throws Exception {
                // arrange

                when(helprequestRepository.findById(eq(12L))).thenReturn(Optional.empty());

                // act
                MvcResult response = mockMvc.perform(
                                delete("/api/helprequests?id=12")
                                                .with(csrf()))
                                .andExpect(status().isNotFound()).andReturn();

                // assert
                verify(helprequestRepository, times(1)).findById(12L);
                Map<String, Object> json = responseToJson(response);
                assertEquals("HelpRequest with id 12 not found", json.get("message"));
        }

        @WithMockUser(roles = { "ADMIN", "USER" })
        @Test
        public void admin_can_edit_an_existing_helprequests() throws Exception {
                // arrange

                LocalDateTime ldt = LocalDateTime.parse("2022-04-20T00:00:00");
                LocalDateTime ldt2 = LocalDateTime.parse("2022-05-20T00:00:00");

                HelpRequest helprequest1 = HelpRequest.builder()
                                .requesterEmail("phtcon@ucsb.edu")
                                .teamId("team01")
                                .tableOrBreakoutRoom("table7")
                                .explanation("Help with React")
                                .requestTime(ldt)
                                .solved(true)
                                .build();

                HelpRequest helprequest2 = HelpRequest.builder()
                                .requesterEmail("jingpeng@ucsb.edu")
                                .teamId("team02")
                                .tableOrBreakoutRoom("table8")
                                .explanation("Help with Spring Boot")
                                .requestTime(ldt2)
                                .solved(false)
                                .build();

                String requestBody = mapper.writeValueAsString(helprequest2);

                when(helprequestRepository.findById(eq(12L))).thenReturn(Optional.of(helprequest1));

                // act
                MvcResult response = mockMvc.perform(
                                put("/api/helprequests?id=12")
                                                .contentType(MediaType.APPLICATION_JSON)
                                                .characterEncoding("utf-8")
                                                .content(requestBody)
                                                .with(csrf()))
                                .andExpect(status().isOk()).andReturn();

                // assert
                verify(helprequestRepository, times(1)).findById(12L);
                verify(helprequestRepository, times(1)).save(helprequest2); // should be saved with updated info
                String responseString = response.getResponse().getContentAsString();
                assertEquals(requestBody, responseString);
        }

        @WithMockUser(roles = { "ADMIN", "USER" })
        @Test
        public void admin_cannot_edit_helprequests_that_does_not_exist() throws Exception {
                // arrange

                LocalDateTime ldt = LocalDateTime.parse("2022-04-20T00:00:00");

                HelpRequest helprequest1 = HelpRequest.builder()
                                .requesterEmail("phtcon@ucsb.edu")
                                .teamId("team01")
                                .tableOrBreakoutRoom("table7")
                                .explanation("Help with React")
                                .requestTime(ldt)
                                .solved(true)
                                .build();

                String requestBody = mapper.writeValueAsString(helprequest1);

                when(helprequestRepository.findById(eq(13L))).thenReturn(Optional.empty());

                // act
                MvcResult response = mockMvc.perform(
                                put("/api/helprequests?id=13")
                                                .contentType(MediaType.APPLICATION_JSON)
                                                .characterEncoding("utf-8")
                                                .content(requestBody)
                                                .with(csrf()))
                                .andExpect(status().isNotFound()).andReturn();

                // assert
                verify(helprequestRepository, times(1)).findById(13L);
                Map<String, Object> json = responseToJson(response);
                assertEquals("HelpRequest with id 13 not found", json.get("message"));

        }
}